# This is a program that allows a human to play Tic Tac Toe with a smart AI. 
# The AI is implemented using minimax approach. The AI is a perfect one, meaning 
# that it will never lose and if there is an immediate win, it will play that. 
#
# It takes quite a long time to initialise and free up the memory for the AI. 
# All observed bugs have been fixed.
#
# In this program, we are very often need the memory from the heap. 
# But because a pair is the only data type allocated on the heap, 
# we have to use it. We very often need a data structure to store 
# a set of 3 objects. We will use the format below. 
# 
#  root --\
#         |
#        \|/
#          
#  +----------+----------+
#  |          |          |
#  |  front   | object 3 |
#  |          |          |
#  +----------+----------+ 
#       |
#       |
#      \|/
#          
#  +----------+----------+
#  |          |          |
#  | object 1 | object 2 |
#  |          |          |
#  +----------+----------+ 
# 
# We call this structure Pair4Three.

# Program:

begin
	
	############################## Interface Functions ######################
	
	# Print greeting message and ask the player to choose their symbol.
	# Return either 'x' or 'o'. 'x' plays first.
	char chooseSymbol() is
		println "========= Tic Tac Toe ================" ;
		println "=  Because we know you want to win   =" ;
		println "======================================" ;
		println "=                                    =" ;
		println "= Who would you like to be?          =" ;
		println "=   x  (play first)                  =" ;
		println "=   o  (play second)                 =" ;
		println "=   q  (quit)                        =" ;
		println "=                                    =" ;
		println "======================================" ;
		
		char chosen = '\0' ;
		while chosen == '\0' do 
			print "Which symbol you would like to choose: " ;
			char c = '\0' ;
			read c ;
			if c == 'x' || c == 'X' then
				chosen = 'x'
			else
				if c == 'o' || c == 'O' then
					chosen = 'o'
				else
					if c == 'q' || c == 'Q' then
						println "Goodbye safety." ;
						exit 0
					else
						print "Invalid symbol: " ;
						println c ;
						println "Please try again."
					fi 
				fi
			fi
		done ;
		print "You have chosen: " ;
		println chosen ;
		return chosen
	end
	
	# Print the board out to the screen.
	bool printBoard(pair(pair, pair) board) is
		pair(pair, pair) front = fst board ;
		pair(pair, char) row1 = fst front ;
		pair(pair, char) row2 = snd front ;
		pair(pair, char) row3 = snd board ;
	
    println " 1 2 3";
    print "1";	
		bool _ = call printRow(row1) ;
		println " -+-+-" ;
    print "2";	
		_ = call printRow(row2) ;
		println " -+-+-" ;
    print "3";	
		_ = call printRow(row3) ;
		println "";
		return true 
	end
	
	# Print a row with a newline to the screen.
	bool printRow(pair(pair, char) row) is
		pair(char, char) front = fst row ;
		
		char cell1 = fst front ;
		char cell2 = snd front ;
		char cell3 = snd row ;
		
		bool _ = call printCell(cell1) ;
		print '|' ;
		_ = call printCell(cell2) ;
		print '|' ;
		_ = call printCell(cell3) ;
		println "" ;
		return true
	end 
	
	# Print a given cell. Print an empty space if it is empty. Return true.
	bool printCell(char cell) is
		if cell == '\0' then
			print ' ' 
		else
			print cell 
		fi ;
		return true
	end
	
	# Ask for a move from the human player. The valid move is then stored in the given move array. 
	# The row number is stored at move[0], the column number is stored at move[1]. Return true.
	bool askForAMoveHuman(pair(pair, pair) board, int[] move) is
		bool success = false ;
		int row = 0 ;
		int column = 0 ;
			
		while !success do
			println "What is your next move?" ;
			print " row (1-3): " ;
			read row ;
			print " column (1-3): " ;
			read column ; 
			success = call validateMove(board, row, column) ;
			
			if success then
				println "" ; # Just print out an empty line
				move[0] = row ;
				move[1] = column ;
				return true
			else
				println "Your move is invalid. Please try again."
			fi			
		done ; 
		# Should not reach here
		return true
	end
	
	# Validate that the give move is valid. Returns true iff it is valid.
	bool validateMove(pair(pair, pair) board, int moveRow, int moveColumn) is
		if 1 <= moveRow && moveRow <= 3 && 1 <= moveColumn && moveColumn <= 3 then
			char sym = call symbolAt(board, moveRow, moveColumn) ;
			# Make sure that the cell is empty
			return sym == '\0'
		else
			return false
		fi
	end
	
	# Print out to the screen about a recent move maid by the AI. Return true.
	bool notifyMoveHuman(pair(pair, pair) board, char currentTurn, char playerSymbol, int moveRow, int moveColumn) is
		print "The AI played at row " ;
		print moveRow ;
		print " column " ;
		println moveColumn ;
		return true
	end
	
	############################### AI Functions #########################################
	
	# Initialise an AI data.
	pair(pair, pair) initAI(char aiSymbol) is
		
		pair(char, pair) info = newpair(aiSymbol, null) ; # Don't know yet how to use the second element.
 		pair(pair, int) stateTree = call generateAllPossibleStates(aiSymbol) ;
		int value = call setValuesForAllStates(stateTree, aiSymbol, 'x') ;
		
		pair(pair, pair) aiData = newpair(info, stateTree) ;
		return aiData
	end
	
	# Generate the whole tree of all states. Then return the tree.
	pair(pair, int) generateAllPossibleStates(char aiSymbol) is
		pair(pair, pair) board = call allocateNewBoard() ;
		pair(pair, int) rootState = call convertFromBoardToState(board) ;
		rootState = call generateNextStates(rootState, 'x') ;
		return rootState
	end
	
	# Convert from a board to a state.
	# A state consists of 3 objects: the board, the pointers to the next states, and the value for this state (int).
	# Therefore, we use the Pair4Three structure.
	pair(pair, int) convertFromBoardToState(pair(pair, pair) board) is
		
		pair(pair, pair) pointers = call generateEmptyPointerBoard() ;
		pair(pair, pair) front = newpair(board, pointers) ;
		pair(pair, int) state = newpair(front, 0) ; # The initial value of 0 will be replaced.
		
		return state
	end
	
	# Allocate memory for the pointers to the next state.
	# It looks like a board, but contains pointers (pairs) instead of chars.
	pair(pair, pair) generateEmptyPointerBoard() is
		
		pair(pair, pair) row1 = call generateEmptyPointerRow() ;
		pair(pair, pair) row2 = call generateEmptyPointerRow() ;
		pair(pair, pair) row3 = call generateEmptyPointerRow() ;
		
		pair(pair, pair) front = newpair(row1, row2) ;
		pair(pair, pair) root = newpair(front, row3) ;
		return root
		
	end
	
	# Allocate memory for the 3 pointers to the next state of a row.
	pair(pair, pair) generateEmptyPointerRow() is
		pair(pair, pair) front = newpair(null, null) ;
		pair(pair, pair) root = newpair(front, null) ;
		return root 
	end
	
	# Generate next states recursively. Returns the state.
	pair(pair, int) generateNextStates(pair(pair, int) state, char currentPlayer) is
		pair(pair, pair) front = fst state ;
		
		pair(pair, pair) board = fst front ;
		pair(pair, pair) pointers = snd front ;
		
		char previousPlayer = call oppositeSymbol(currentPlayer) ;
		
		bool won = call hasWon(board, previousPlayer) ;
		
		if won then
			# The game ends. The winner is known.
			return state 
		else
			bool _ = call generateNextStatesBoard(board, pointers, currentPlayer) ;
			return state
		fi
		
	end
	
	# Generate Just the next states for every possible point on the board. Update the pointers accordingly. Return true.
	bool generateNextStatesBoard(pair(pair, pair) board, pair(pair, pair) pointers, char currentPlayer) is
		pair(pair, pair) front = fst board ;
		
		pair(pair, char) row1 = fst front ;
		pair(pair, char) row2 = snd front ;
		pair(pair, char) row3 = snd board ;
		
		pair(pair, pair) frontP = fst pointers ;
		
		pair(pair, pair) row1P = fst frontP ;
		pair(pair, pair) row2P = snd frontP ;
		pair(pair, pair) row3P = snd pointers ;
		
		bool _ = call generateNextStatesRow(board, row1, row1P, currentPlayer, 1) ;
		_ = call generateNextStatesRow(board, row2, row2P, currentPlayer, 2) ;
		_ = call generateNextStatesRow(board, row3, row3P, currentPlayer, 3) ;
		
		return true
	end
	
	# Generate Just the next states for every possible point on the row. Update the pointers accordingly. Return true.
	bool generateNextStatesRow(pair(pair, pair) board, pair(pair, char) row, pair(pair, pair) pointerRow, char currentPlayer, int rowNumber) is
		pair(char, char) front = fst row ;
		
		char cell1 = fst front ;
		char cell2 = snd front ;
		char cell3 = snd row ;
		
		pair(pair, pair) frontP = fst pointerRow ;
		
		fst frontP = call generateNextStatesCell(board, cell1, currentPlayer, rowNumber, 1) ;
		snd frontP = call generateNextStatesCell(board, cell2, currentPlayer, rowNumber, 2) ;
		snd pointerRow = call generateNextStatesCell(board, cell3, currentPlayer, rowNumber, 3) ;
		
		return true
	end
	
	# Generate Just the next states for the cell on the board. Returns the pointer to the next state.
	pair(pair, int) generateNextStatesCell(pair(pair, pair) board, char cell, char currentPlayer, int rowNumber, int columnNumber) is
		if cell == '\0' then
			# If the cell is empty, generate the next state.
			pair(pair, pair) board2 = call cloneBoard(board) ;
			bool _ = call placeMove(board2, currentPlayer, rowNumber, columnNumber) ;
			pair(pair, int) state = call convertFromBoardToState(board2) ;
			char nextPlayer = call oppositeSymbol(currentPlayer) ;
			
			# Generate next states recursively and return it out.
			state = call generateNextStates(state, nextPlayer) ;
			return state
		else
			# If the cell is not empty, return null.
			return null
		fi
	end
	
	# Clone board.
	pair(pair, pair) cloneBoard(pair(pair, pair) board) is
		pair(pair, pair) board2 = call allocateNewBoard() ; 
		bool _ = call copyBoard(board, board2) ;
		return board2 
	end
	
	# Copy the content of one board to another. Return true.
	bool copyBoard(pair(pair, pair) from, pair(pair, pair) to) is
		pair(pair, pair) frontFrom = fst from ;
		pair(pair, char) row1From = fst frontFrom ;
		pair(pair, char) row2From = snd frontFrom ;
		pair(pair, char) row3From = snd from ;
		
		pair(pair, pair) frontTo = fst to ;
		pair(pair, char) row1To = fst frontTo ;
		pair(pair, char) row2To = snd frontTo ;
		pair(pair, char) row3To = snd to ;
				
		bool _ = call copyRow(row1From, row1To) ;		
		_ = call copyRow(row2From, row2To) ;
		_ = call copyRow(row3From, row3To) ;
				
		return true
	end
	
	# Copy from one board row to another. Return true.
	bool copyRow(pair(pair, char) from, pair(pair, char) to) is
		pair(char, char) frontFrom = fst from ;
		pair(char, char) frontTo = fst to ;
		
		fst frontTo = fst frontFrom ;
		snd frontTo = snd frontFrom ;
		snd to = snd from ;
		return true
	end
	
	# Calculate the value of how good each state is using Minimax approach. 
	# If AI wins, value = 100.
	# If AI lose, value = -100.
	# If Stalemate, value = 0.
	# Otherwise, combine the values from the next states.
	# If this state is null, then return -101 if it is a max state, 101 if it is a min state (thus those values will not be picked).
	# Return the value.
	int setValuesForAllStates(pair(pair, int) state, char aiSymbol, char currentPlayer) is
		int outValue = 0 ;
		if state == null then
			# The current state is impossible to reach.
			# Assign a value that will not be picked in the future.
			if currentPlayer == aiSymbol then
				# Later on, we will pick the lowest value (min). So we set this value high so that it will not be picked.
				outValue = 101
			else
				# Later on, we will pick the highest value (max). So we set this value low so that it will not be picked.
				outValue = -101
			fi
		else 
		
			pair(pair, pair) front = fst state ;
			
			pair(pair, pair) board = fst front ;
			pair(pair, pair) pointers = snd front ;
			
			char anotherPlayer = call oppositeSymbol(currentPlayer) ;
			
			# The current player is about to play. So if another player has won it already, the current player cannot play it.
			bool won = call hasWon(board, anotherPlayer) ;
		
			if won then
				if anotherPlayer == aiSymbol then
					outValue = 100 # We won
				else
					outValue = -100 # We lost
				fi 
			else
				bool hasEmptyCell = call containEmptyCell(board) ;
				if hasEmptyCell then
					# If can do next move, calculate the value from the next states.
					outValue = call calculateValuesFromNextStates(pointers, aiSymbol, anotherPlayer) ;
					
					# In order for the AI to choose the winning move immediately, we have to reduce the value for those not winning yet.
					# So if the next move has value 100, we set the value of this move 90.
					if outValue == 100 then
						outValue = 90 
					else
						skip
					fi
				else
					# Otherwise, it is a stalemate.
					outValue = 0 
				fi 
			fi ;
			snd state = outValue
		fi ;
		return outValue
	end
	
	# Calculate the values for each next state, then combine them to get the value of this state. Return the value.
	int calculateValuesFromNextStates(pair(pair, pair) pointers, char aiSymbol, char playerOfNextState) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ;
		pair(pair, pair) row3 = snd pointers ;
		
		int value1 = call calculateValuesFromNextStatesRow(row1, aiSymbol, playerOfNextState) ;
		int value2 = call calculateValuesFromNextStatesRow(row2, aiSymbol, playerOfNextState) ;
		int value3 = call calculateValuesFromNextStatesRow(row3, aiSymbol, playerOfNextState) ;
		
		int out = call combineValue(aiSymbol, playerOfNextState, value1, value2, value3) ;
		return out
	end
	
	# Calculate the values for each next state in a row, then combine them to get the value of this row. Return the value.
	int calculateValuesFromNextStatesRow(pair(pair, pair) rowPointers, char aiSymbol, char playerOfNextState) is
		pair(pair, pair) front = fst rowPointers ;
		
		pair(pair, int) state1 = fst front ;
		pair(pair, int) state2 = snd front ; 
		pair(pair, int) state3 = snd rowPointers ;
		
		int value1 = call setValuesForAllStates(state1, aiSymbol, playerOfNextState) ;
		int value2 = call setValuesForAllStates(state2, aiSymbol, playerOfNextState) ;
		int value3 = call setValuesForAllStates(state3, aiSymbol, playerOfNextState) ;
		
		int out = call combineValue(aiSymbol, playerOfNextState, value1, value2, value3) ;
		return out
	end
	
	int combineValue(char aiSymbol, char playerOfNextState, int value1, int value2, int value3) is
		int out = 0 ;
		if aiSymbol == playerOfNextState then
			# We move next so the human moves now. Pick the lowest value.
			out = call min3(value1, value2, value3)
		else
			# Human moves next so we move now. Pick the highest value.
			out = call max3(value1, value2, value3)
		fi ;
		return out
	end
	
	# Find the minimum of the three.
	int min3(int a, int b, int c) is
		if a < b then
			if a < c then
				return a 
			else 
				return c
			fi
		else
			if b < c then
				return b
			else 
				return c
			fi
		fi
	end
	
	# Find the maximum of the three.
	int max3(int a, int b, int c) is
		if a > b then
			if a > c then
				return a 
			else 
				return c
			fi
		else
			if b > c then
				return b
			else 
				return c
			fi
		fi
	end
	
	# Destroy all memory used by the AI. Return true.
	bool destroyAI(pair(pair, pair) aiData) is
		
		pair(char, pair) info = fst aiData ;
 		pair(pair, int) stateTree = snd aiData ;

		bool _ = call deleteStateTreeRecursively(stateTree) ;
		free info ;
		free aiData ;
		return true
	end
	
	# Ask the AI for a new move. Return true.
	bool askForAMoveAI(pair(pair, pair) board, char currentTurn, char playerSymbol, pair(pair, pair) aiData, int[] move) is
		
		pair(char, pair) info = fst aiData ;
 		pair(pair, int) stateTree = snd aiData ;
		
		pair(pair, pair) front = fst stateTree ;
		
		pair(pair, pair) pointers = snd front ;
		int stateValue = snd stateTree ;
		
		bool _ = call findTheBestMove(pointers, stateValue, move) ;		
		
		println "AI is cleaning up its memory..." ;
		# Update the state tree by using the new move.
		snd aiData = call deleteAllOtherChildren(pointers, move[0], move[1]) ;
	
		_ = call deleteThisStateOnly(stateTree) ;
		return true
	end
	
	# Given the pointers to all next states, pick the first one with the given stateValue and store the move in the the given array.
	# Return true. 
	bool findTheBestMove(pair(pair, pair) pointers, int stateValue, int[] move) is

		# We have a hack by changing the state value to 90 if the next state is 100. 
		# So if we have a state value of 90, look for the one with 100 first.
		# If found, use it. Otherwise, look for the one with 90.
		if stateValue == 90 then
			bool found = call findMoveWithGivenValue(pointers, 100, move) ;
			if found then
				return true
			else
				skip
			fi
		else
			skip
		fi ;
		
		# Normal case. Or when cannot find the child with 100.
		bool found = call findMoveWithGivenValue(pointers, stateValue, move) ;
		if found then
			return true
		else
			# Should not happen. Cannot find such move.
			println "Internal Error: cannot find the next move for the AI" ;
			exit -1
		fi
		
	end

	# Given the pointers to all next states, pick the first one with the given stateValue and store the move in the the given array.
	# Return true in this case. Otherwise, the move array is untouched and return false. 
	bool findMoveWithGivenValue(pair(pair, pair) pointers, int stateValue, int[] move) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ; 
		pair(pair, pair) row3 = snd pointers ;
		
		bool find = call findMoveWithGivenValueRow(row1, stateValue, move) ;
		if find then
			move[0] = 1
		else
			find = call findMoveWithGivenValueRow(row2, stateValue, move) ;
			if find then
				move[0] = 2
			else
				find = call findMoveWithGivenValueRow(row3, stateValue, move) ;
				if find then
					move[0] = 3
				else
					# Not found, return false.
					return false
				fi
			fi
		fi ;
		return true
	end
	
	# Given a row of pointers, pick the first one with the given stateValue and store in move[1], return true if such child state is found. Otherwise, return false and move[1] is untouched.
	bool findMoveWithGivenValueRow(pair(pair, pair) rowPointers, int stateValue, int[] move) is
		
		pair(pair, pair) front = fst rowPointers ;
		
		pair(pair, int) cell1 = fst front ;
		pair(pair, int) cell2 = snd front ;
		pair(pair, int) cell3 = snd rowPointers ;
		
		bool find = call hasGivenStateValue(cell1, stateValue) ;
		if find then
			move[1] = 1
		else
			find = call hasGivenStateValue(cell2, stateValue) ;
			if find then
				move[1] = 2 
			else 
				find = call hasGivenStateValue(cell3, stateValue) ;
				if find then
					move[1] = 3
				else 
					return false
				fi
			fi
		fi ;
		return true
	end
	
	# Given a state, an a state value. Returns true iff the state has the given state value.
	bool hasGivenStateValue(pair(pair, int) state, int stateValue) is
		if state == null then
			return false
		else
			int actual = snd state ;
			return actual == stateValue
		fi
	end
	
	# Notify a move made by a human player to the AI. Return true.
	bool notifyMoveAI(pair(pair, pair) board, char currentTurn, char playerSymbol, pair(pair, pair) aiData, int moveRow, int moveColumn) is
		
		#pair(char, pair) info = fst aiData ; #unused
		pair(pair, int) stateTree = snd aiData ;
		
		pair(pair, pair) front = fst stateTree ;
		
		#pair(pair, pair) board = fst front ; #unused
		pair(pair, pair) pointers = snd front ;
		
		println "AI is cleaning up its memory..." ;
		
		# Set new state tree, remove all other children created by making other moves.
		snd aiData = call deleteAllOtherChildren(pointers, moveRow, moveColumn) ;
		bool _ = call deleteThisStateOnly(stateTree) ;
		return true
	end
	
	# Delete all decendent states apart from those made by moving a given move. Return the child state of that given move.
	pair(pair, int) deleteAllOtherChildren(pair(pair, pair) pointers, int moveRow, int moveColumn) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ;
		pair(pair, pair) row3 = snd pointers ;

		# Find which row to keep or which rows to delete.
		pair(pair, pair) toKeepRow = null;
		pair(pair, pair) toDeleteRow1 = null;
		pair(pair, pair) toDeleteRow2 = null;
		
		if moveRow == 1 then
			toKeepRow = row1 ; 
			toDeleteRow1 = row2 ; 
			toDeleteRow2 = row3
		else 
			toDeleteRow1 = row1 ;
			if moveRow == 2 then
				toKeepRow = row2 ; 
				toDeleteRow2 = row3
			else
				# moveRow == 3
				toKeepRow = row3 ; 
				toDeleteRow2 = row2
			fi
		fi ;
		
		pair(pair, int) out = call deleteAllOtherChildrenRow(toKeepRow, moveColumn) ;
		bool _ = call deleteChildrenStateRecursivelyRow(toDeleteRow1) ;
		_ = call deleteChildrenStateRecursivelyRow(toDeleteRow2) ;
		
		return out
	end
	
	pair(pair, int) deleteAllOtherChildrenRow(pair(pair, pair) rowPointers, int moveColumn) is
		pair(pair, pair) front = fst rowPointers ;
		
		pair(pair, int) cell1 = fst front ;
		pair(pair, int) cell2 = snd front ;
		pair(pair, int) cell3 = snd rowPointers ;

		# Find which cell to keep or which cells to delete.
		pair(pair, int) toKeepCell = null;
		pair(pair, int) toDeleteCell1 = null;
		pair(pair, int) toDeleteCell2 = null;
		
		if moveColumn == 1 then
			toKeepCell = cell1 ; 
			toDeleteCell1 = cell2 ; 
			toDeleteCell2 = cell3
		else 
			toDeleteCell1 = cell1 ;
			if moveColumn == 2 then
				toKeepCell = cell2 ; 
				toDeleteCell2 = cell3
			else
				# moveColumn == 3
				toKeepCell = cell3 ; 
				toDeleteCell2 = cell2
			fi
		fi ;
		
		bool _ = call deleteStateTreeRecursively(toDeleteCell1) ;
		_ = call deleteStateTreeRecursively(toDeleteCell2) ;
		
		return toKeepCell
	end
	
	# Deallocate a given state and all its decendents.
	bool deleteStateTreeRecursively(pair(pair, int) stateTree) is
		if stateTree == null then
			return true 
		else
			pair(pair, pair) front = fst stateTree ;
			
			pair(pair, pair) board = fst front ;
			pair(pair, pair) pointers = snd front ;
			
			bool _ = call deleteChildrenStateRecursively(pointers) ;
			_ = call deleteThisStateOnly(stateTree) ;
			return true
		fi		
	end
	
	# Given a state tree, deallocate the board, the pointers and the other pairs of this state only. The childrens are preserved. Return true.
	bool deleteThisStateOnly(pair(pair, int) stateTree) is	
		pair(pair, pair) front = fst stateTree ;
		
		pair(pair, pair) board = fst front ;
		pair(pair, pair) pointers = snd front ;

		bool _ = call freeBoard(board) ;
		_ = call freePointers(pointers) ;
		free front ;
		free stateTree ;
		return true
	end
	
	bool freePointers(pair(pair, pair) pointers) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ;
		pair(pair, pair) row3 = snd pointers ;
		
		bool _ = call freePointersRow(row1) ;
		_ = call freePointersRow(row2) ;
		_ = call freePointersRow(row3) ;
		
		free front ;
		free pointers ;
		return true
	end
	
	bool freePointersRow(pair(pair, pair) rowPointers) is
		pair(pair, pair) front = fst rowPointers ;
		
		free front ;
		free rowPointers ;
		return true
	end
	
	# Deallocate all decendent states.
	bool deleteChildrenStateRecursively(pair(pair, pair) pointers) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ;
		pair(pair, pair) row3 = snd pointers ;
		
		bool _ = call deleteChildrenStateRecursivelyRow(row1) ;
		_ = call deleteChildrenStateRecursivelyRow(row2) ;
		_ = call deleteChildrenStateRecursivelyRow(row3) ;
		
		return true
	end
	
	# Deallocate all decendent states given a row of pointers.
	bool deleteChildrenStateRecursivelyRow(pair(pair, pair) rowPointers) is
		pair(pair, pair) front = fst rowPointers ;
		pair(pair, int) cell1 = fst front ;
		pair(pair, int) cell2 = snd front ;
		pair(pair, int) cell3 = snd rowPointers ;
		
		bool _ = call deleteStateTreeRecursively(cell1) ;
		_ = call deleteStateTreeRecursively(cell2) ;
		_ = call deleteStateTreeRecursively(cell3) ;
		
		return true
	end
	
	############################### Game Engine Functions ##################################
	
	# Ask for a move from the current player. The valid move is stored in the move array. Return true.
	bool askForAMove(pair(pair, pair) board, char currentTurn, char playerSymbol, pair(pair, pair) aiData, int[] move) is
		if currentTurn == playerSymbol then
			bool _ = call askForAMoveHuman(board, move)
		else 
			bool _ = call askForAMoveAI(board, currentTurn, playerSymbol, aiData, move)
		fi ;
		return true
	end
	
	# Place the given move of the currentTurn in the board. Return true.
	bool placeMove(pair(pair, pair) board, char currentTurn, int moveRow, int moveColumn) is
		
		# Find the target row.
		pair(pair, char) targetRow = null ;
		if moveRow <= 2 then
			pair(pair, pair) front = fst board ;
			if moveRow == 1 then
				targetRow = fst front
			else
				# moveRow == 2
				targetRow = snd front
			fi
		else
			# moveRow == 3
			targetRow = snd board
		fi ;
		
		# Set the target cell
		if moveColumn <= 2 then
			pair(char, char) front = fst targetRow ;
			if moveColumn == 1 then
				fst front = currentTurn
			else
				# moveColumn == 2
				snd front = currentTurn
			fi
		else
			# moveColumn == 3
			snd targetRow = currentTurn
		fi ;
		return true
		
	end
	
	# Notify the opponent about a move of another party. Return true.
	bool notifyMove(pair(pair, pair) board, char currentTurn, char playerSymbol, pair(pair, pair) aiData, int moveRow, int moveColumn) is
		if currentTurn == playerSymbol then
			bool _ = call notifyMoveAI(board, currentTurn, playerSymbol, aiData, moveRow, moveColumn)
		else 
			bool _ = call notifyMoveHuman(board, currentTurn, playerSymbol, moveRow, moveColumn)
		fi ;
		return true
	end
	
	# Given either 'x' or 'o', returns another one.
	char oppositeSymbol(char symbol) is
		if symbol == 'x' then
			return 'o' 
		else
			if symbol == 'o' then
				return 'x'
			else
				# Should not happen!
				println "Internal Error: symbol given is neither \'x\' or \'o\'" ;
				exit -1 
			fi 
		fi
	end
	
	# row = 1, 2 or 3
	# column = 1, 2 or 3
	char symbolAt(pair(pair, pair) board, int row, int column) is
	
		# Find the target row.
		pair(pair, char) targetRow = null ;
		if row <= 2 then
			pair(pair, pair) front = fst board ;
			if row == 1 then
				targetRow = fst front
			else
				# row == 2
				targetRow = snd front
			fi
		else
			# row == 3
			targetRow = snd board
		fi ;
		
		# Now find the target cell.
		char targetCell = '\0' ;
		if column <= 2 then
			pair(char, char) front = fst targetRow ;
			if column == 1 then 
				targetCell = fst front 
			else
				# column == 2
				targetCell = snd front
			fi
		else
			# column == 3
			targetCell = snd targetRow
		fi ;
			
		return targetCell	
	end
	
	# Return true if there is at least one empty cell where the next player can place a move. Otherwise, return false (game ends).
	bool containEmptyCell(pair(pair, pair) board) is
		pair(pair, pair) front = fst board ;
		
		pair(pair, char) row1 = fst front ;
		pair(pair, char) row2 = snd front ;
		pair(pair, char) row3 = snd board ;
		
		bool row1ContainEmpty = call containEmptyCellRow(row1) ;
		bool row2ContainEmpty = call containEmptyCellRow(row2) ;
		bool row3ContainEmpty = call containEmptyCellRow(row3) ;
		
		return row1ContainEmpty || row2ContainEmpty || row3ContainEmpty
	end
	
	bool containEmptyCellRow(pair(pair, char) row) is
		pair(char, char) front = fst row ;
		
		char cell1 = fst front ;
		char cell2 = snd front ;
		char cell3 = snd row ;
		
		return cell1 == '\0' || cell2 == '\0' || cell3 == '\0'
	end
	
	# Find if the candidate symbol ('x' or 'o') has won the game.
	# Returns true if and only if it has won. 
	bool hasWon(pair(pair, pair) board, char candidate) is
		char c11 = call symbolAt(board, 1, 1) ;
		char c12 = call symbolAt(board, 1, 2) ;
		char c13 = call symbolAt(board, 1, 3) ;
		char c21 = call symbolAt(board, 2, 1) ;
		char c22 = call symbolAt(board, 2, 2) ;
		char c23 = call symbolAt(board, 2, 3) ;
		char c31 = call symbolAt(board, 3, 1) ;
		char c32 = call symbolAt(board, 3, 2) ;
		char c33 = call symbolAt(board, 3, 3) ;
		
		return 
			# Row win
			c11 == candidate && c12 == candidate && c13 == candidate ||
			c21 == candidate && c22 == candidate && c23 == candidate ||
			c31 == candidate && c32 == candidate && c33 == candidate ||
			 
			# Column win
			c11 == candidate && c21 == candidate && c31 == candidate ||
			c12 == candidate && c22 == candidate && c32 == candidate ||
			c13 == candidate && c23 == candidate && c33 == candidate ||
			
			# Diagonal win
			c11 == candidate && c22 == candidate && c33 == candidate ||
			c13 == candidate && c22 == candidate && c31 == candidate
	end
	
	# Allocate a new board. 
	# We use a Pair4Three structure to store pointers to the 3 rows.
	pair(pair, pair) allocateNewBoard() is
		pair(pair, char) row1 = call allocateNewRow() ;
		pair(pair, char) row2 = call allocateNewRow() ;
		pair(pair, char) row3 = call allocateNewRow() ;
		
		pair(pair, pair) front = newpair(row1, row2) ;
		pair(pair, pair) root = newpair(front, row3) ;
		return root
	end
	
	# Allocate a row of the board. 
	# A row is represented by a Pair4Three structure.
	# The default value in each cell is '\0'.
	pair(pair, char) allocateNewRow() is
		pair(char, char) front = newpair('\0', '\0') ;
		pair(pair, char) root = newpair(front, '\0') ;
		return root
	end

	# Free a memory used to store the whole board.
	# Return true.
	bool freeBoard(pair(pair, pair) board) is
		pair(pair, pair) front = fst board ;
		
		pair(pair, char) row1 = fst front ;
		pair(pair, char) row2 = snd front ;
		pair(pair, char) row3 = snd board ;
		
		bool _ = call freeRow(row1) ;
		_ = call freeRow(row2) ;
		_ = call freeRow(row3) ;
		
		free front ;
		free board ;
		return true
	end
	
	# Free the memory used for a row. Return true.
	bool freeRow(pair(pair, char) row) is
		pair(char, char) front = fst row ;
		free front ;
		free row ;
		return true
	end
	
	# For debugging purpose.
	bool printAiData(pair(pair, pair) aiData) is
		
		pair(char, pair) info = fst aiData ;
		pair(pair, int) stateTree = snd aiData ;
		
		bool _ = call printStateTreeRecursively(stateTree) ;
		exit 0
	end
	
	bool printStateTreeRecursively(pair(pair, int) stateTree) is
		if stateTree == null then
			return true 
		else 
			pair(pair, pair) front = fst stateTree ;
			
			pair(pair, pair) board = fst front ;
			pair(pair, pair) pointers = snd front ;
			int value = snd stateTree ;
			
			# Print the value
			print 'v' ;
			print '=' ;
			println value ;
			
			bool _ = call printBoard(board) ;
			_ = call printChildrenStateTree(pointers) ;
			
			println 'p' ;
			return true
		fi
	end
	
	bool printChildrenStateTree(pair(pair, pair) pointers) is
		pair(pair, pair) front = fst pointers ;
		
		pair(pair, pair) row1 = fst front ;
		pair(pair, pair) row2 = snd front ;
		pair(pair, pair) row3 = snd pointers ;
		
		bool _ = call printChildrenStateTreeRow(row1) ;
		_ = call printChildrenStateTreeRow(row2) ;
		_ = call printChildrenStateTreeRow(row3) ;
		return true
	end
	
	bool printChildrenStateTreeRow(pair(pair, pair) rowPointers) is
		pair(pair, pair) front = fst rowPointers ;
		
		pair(pair, int) cell1 = fst front ;
		pair(pair, int) cell2 = snd front ;
		pair(pair, int) cell3 = snd rowPointers ;
		
		bool _ = call printStateTreeRecursively(cell1) ;
		_ = call printStateTreeRecursively(cell2) ;
		_ = call printStateTreeRecursively(cell3) ;
		
		return true
	end
	
	############################## Main Function ############################
	
	char playerSymbol = call chooseSymbol() ;
	char aiSymbol = call oppositeSymbol(playerSymbol) ;
	char currentTurn = 'x' ;
	
	pair(pair, pair) board = call allocateNewBoard() ;
	
	println "Initialising AI. Please wait, this may take a few minutes." ;
	pair(pair, pair) aiData = call initAI(aiSymbol) ;
	
	int turnCount = 0 ;
	char winner = '\0' ;
	
	bool _ = call printBoard(board) ;
	
	while winner == '\0' && turnCount < 9 do
		int[] move = [0, 0] ;
		_ = call askForAMove(board, currentTurn, playerSymbol, aiData, move) ;
		_ = call placeMove(board, currentTurn, move[0], move[1]) ;
		_ = call notifyMove(board, currentTurn, playerSymbol, aiData, move[0], move[1]) ;
		_ = call printBoard(board) ;
		bool won = call hasWon(board, currentTurn) ;
		if won then
			winner = currentTurn
		else 
			skip
		fi ;
		
		# Progress to the next turn
		currentTurn = call oppositeSymbol(currentTurn) ;
		turnCount = turnCount + 1
	done ;
	
	_ = call freeBoard(board) ;
	_ = call destroyAI(aiData) ;
	
	if winner != '\0' then
		print winner ;
		println " has won!" 
	else 
		println "Stalemate!" 
	fi
end
