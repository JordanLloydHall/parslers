# This program implements floating-point type using integers.
# The details about how it is done can found here: 
# http://www.cse.iitd.ernet.in/~sbansal/csl373/pintos/doc/pintos_7.html#SEC135
# 
# Basically, our integer have 32 bits. We use the first bit for sign, the next 
# 17 bits for value above the decimal digit and the last 14 bits for the values 
# after the decimal digits.
# 
# We call the number 17 above p, and the number 14 above q.
# We have f = 2**q. 
# 

begin
	# Returns the number of bits behind the decimal points.
	int q() is
		return 14
	end
	
	# Because we do not have bitwise shit in the language, we have to calculate it manually.
	int power(int base, int amount) is
		int result = 1 ;
		while amount > 0 do
			result = result * base ;
			amount = amount - 1
		done ;
		return result
	end
	
	int f() is
		int qq = call q() ;
		# f = 2**q
		int f = call power(2, qq) ;
		return f
	end
	
	# The implementation of the following functions are translated from the URI above.
	# Arguments start with 'x' have type fixed-point. Those start with 'n' have type integer.
	
	int intToFixedPoint(int n) is
		int ff = call f() ;
		return n * ff
	end
	
	int fixedPointToIntRoundDown(int x) is
		int ff = call f() ;
		return x / ff
	end

	int fixedPointToIntRoundNear(int x) is
		int ff = call f() ;
		if x >= 0
		then
			return (x + ff / 2) / ff 
		else
			return (x - ff / 2) / ff
		fi
	end

	int add(int x1, int x2) is 
		return x1 + x2
	end
	
	int subtract(int x1, int x2) is
		return x1 - x2
	end
	
	int addByInt(int x, int n) is
		int ff = call f() ;
		return x + n * ff
	end

	int subtractByInt(int x, int n) is
		int ff = call f() ;
		return x - n * ff
	end

	int multiply(int x1, int x2) is
		# We don't have int_64 in our language so we just ignore the overflow
		int ff = call f() ;
		return x1 * x2 / ff 
	end

	int multiplyByInt(int x, int n) is
		return x * n
	end
	
	int divide(int x1, int x2) is
		# We don't have int_64 in our language so we just ignore the overflow
		int ff = call f() ;
		return x1 * ff / x2
	end

	int divideByInt(int x, int n) is
		return x / n
	end

	# Main function
	int n1 = 10 ;
	int n2 = 3 ;
	
	print "Using fixed-point real: " ;
	print n1 ;
	print " / " ;
	print n2 ;
	print " * " ;
	print n2 ;
	print " = " ;
	
	int x = call intToFixedPoint(n1) ;
	x = call divideByInt(x, n2) ;
	x = call multiplyByInt(x, n2) ;
	int result = call fixedPointToIntRoundNear(x) ;
	println result 
end



